function Screen.init 0
push constant 16384
pop static 0
push constant 0
pop static 4
push constant 1
neg
pop static 5
push constant 0
pop static 2
push constant 1
pop static 3
push static 5
pop static 1
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label L0
push local 0
push constant 8192
lt
not
if-goto L1
push static 0
push local 0
add
push static 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto L0
label L1
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 1
push constant 0
return
function Screen.drawPixel 2
push argument 1
push constant 32
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 15
and
call Math.two_to_the 1
pop local 1
push static 1
not
if-goto L2
push static 0
push local 0
add
push static 0
push local 0
add
pop pointer 1
push that 0
push local 1
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto L3
label L2
push static 0
push local 0
add
push static 0
push local 0
add
pop pointer 1
push that 0
push local 1
not
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
label L3
push constant 0
return
function Screen.drawLine 3
push argument 0
push argument 2
gt
not
if-goto L4
push argument 0
pop local 2
push argument 2
pop argument 0
push local 2
pop argument 2
push argument 1
pop local 2
push argument 3
pop argument 1
push local 2
pop argument 3
goto L5
label L4
label L5
push argument 2
push argument 0
sub
pop local 0
push argument 3
push argument 1
sub
pop local 1
push local 0
push constant 0
eq
not
if-goto L6
push argument 0
push argument 1
push argument 3
call Screen.drawVerticalLine 3
pop temp 0
goto L7
label L6
push local 1
push constant 0
eq
not
if-goto L8
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontalLine 3
pop temp 0
goto L9
label L8
push argument 0
push argument 1
push argument 2
push argument 3
push local 0
push local 1
call Screen.drawDiagonalLine 6
pop temp 0
label L9
label L7
push constant 0
return
function Screen.drawDiagonalLine 4
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
push argument 5
push constant 0
lt
not
if-goto L10
push constant 1
neg
pop local 3
goto L11
label L10
push constant 1
pop local 3
label L11
label L12
push local 0
push argument 4
gt
not
push local 3
push constant 1
eq
push local 1
push argument 5
gt
not
and
push local 3
push constant 1
neg
eq
push local 1
push argument 5
lt
not
and
or
and
not
if-goto L13
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 0
lt
not
if-goto L14
push local 0
push constant 1
add
pop local 0
push local 2
push argument 5
push local 3
call Math.multiply 2
add
pop local 2
goto L15
label L14
push local 1
push local 3
add
pop local 1
push local 2
push argument 4
sub
pop local 2
label L15
goto L12
label L13
push constant 0
return
function Screen.drawVerticalLine 1
push argument 1
push argument 2
gt
not
if-goto L16
push argument 1
pop local 0
push argument 2
pop argument 1
push local 0
pop argument 2
goto L17
label L16
label L17
label L18
push argument 1
push argument 2
gt
not
not
if-goto L19
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto L18
label L19
push constant 0
return
function Screen.drawHorizontalLine 4
push argument 0
push constant 15
and
pop local 2
push argument 1
push constant 15
and
pop local 3
push argument 2
push constant 32
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 2
push constant 32
call Math.multiply 2
push argument 1
push constant 16
call Math.divide 2
add
push local 3
push constant 0
eq
add
pop local 1
push local 0
push local 1
eq
not
if-goto L20
push argument 0
push argument 1
push argument 2
call Screen.draw_short_horizontal_line 3
pop temp 0
goto L21
label L20
push local 2
push constant 0
eq
not
not
if-goto L22
push local 0
push constant 1
add
pop local 0
push argument 0
push argument 0
push constant 16
add
push local 2
sub
push argument 2
call Screen.draw_short_horizontal_line 3
pop temp 0
goto L23
label L22
label L23
push local 3
push constant 0
eq
not
not
if-goto L24
push local 1
push constant 1
sub
pop local 1
push argument 1
push local 3
sub
push argument 1
push argument 2
call Screen.draw_short_horizontal_line 3
pop temp 0
goto L25
label L24
label L25
label L26
push local 0
push local 1
gt
not
not
if-goto L27
push static 0
push local 0
add
push static 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto L26
label L27
label L21
push constant 0
return
function Screen.draw_short_horizontal_line 0
label L28
push argument 0
push argument 1
gt
not
not
if-goto L29
push argument 0
push argument 2
call Screen.drawPixel 2
pop temp 0
push argument 0
push constant 1
add
pop argument 0
goto L28
label L29
push constant 0
return
function Screen.drawRectangle 1
push argument 1
pop local 0
label L30
push local 0
push argument 3
gt
not
not
if-goto L31
push argument 0
push argument 2
push local 0
call Screen.drawHorizontalLine 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto L30
label L31
push constant 0
return
function Screen.drawCircle 3
push argument 2
neg
pop local 1
push argument 2
push argument 2
call Math.multiply 2
pop local 2
label L32
push local 1
push argument 2
gt
not
not
if-goto L33
push local 2
push local 1
push local 1
call Math.multiply 2
sub
call Math.sqrt 1
pop local 0
push argument 0
push local 0
sub
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawHorizontalLine 3
pop temp 0
push local 1
push constant 1
add
pop local 1
goto L32
label L33
push constant 0
return
